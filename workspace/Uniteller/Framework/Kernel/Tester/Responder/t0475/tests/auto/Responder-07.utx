;учебный скрипт дл€ изучени€ команды Receive
Modules
  Module1 : Uniteller.Framework.Kernel.Tester.Responder
Script
  1 : Send <Module1>
    Kernel.Tester.Responder.MessageExample : 1
  3 : Receive <Module1> ; шаг второй - команда Receive; принимаем от Module1
    Kernel.Tester.Responder.MessageExample : 1 ; событие MessageExample протокола Kernel.Tester.Responder первого поколени€
  4 : Receive <Module1> ; принимаем от Module1
    Kernel.StateChanged : 1 ; событие StateChanged протокола Kernel первого поколени€
; далее с помощью инструкции SetTo запомним значени€ параметров сообщени€ 
      MachineName : Uniteller.Framework.Kernel.Tester.Responder ; сравниваем аргумент событи€ MachineName с константой (Uniteller.Framework.Kernel.Tester.Responder) 
        SetTo : <Var1> ; присваиваем значение параметра MachineName переменной Var1
      OldState : * ; игнорируем контроль значени€ аргумента OldState (* - любое значение), но убеждаемс€ что сам аргумент в сообщении есть
        SetTo : <Var2> ; присваиваем значение параметра OldState переменной Var2
      NewState : Idle ; сравниваем значение аргумента NewState с константой (Idle)
        SetTo : <Var3> ; присваиваем значение параметра NewState переменной Var3
      Event : <Kernel.Tester.Responder.MessageExample> ; переход вызван событием Kernel.Tester.Responder.MessageExample
        SetTo : <Var4> ; присваиваем значение параметра Event переменной Var4
  5 : Send <Module1> ; отправл€ем Ђѕопугайчикуї сообщение StateChanged, сформированное с помощью введЄнных нами переменных
    Kernel.StateChanged : 1
      MachineName : <Var1>
      OldState : <Var2>
      NewState : <Var3>
      Event : <Var4>
  6 : Receive <Module1> ; получаем от Ђѕопугайчикаї последнее отправленное нами сообщение
    Kernel.StateChanged : 1
  7 : Receive <Module1> ; а теперь получаем от €дра сообщение StateChanged о смене Ђѕопугайчикомї своего состо€ни€
    Kernel.StateChanged : 1
; конец скрипта





