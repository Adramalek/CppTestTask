; Метаданные тестового модуля 
<root>: Kernel\Targets
1 : CrossroadController
  S01: Реализация логики переключения светофора
    Описание: @nonutx
      Перед началом работы модуль CrossroadController должен быть проинициализирован.
      После инициализации модуль ожидает от контролирующей логики команды для начала работы.
      Цель модуля - организация циклического переключения сигнала светофора по таймингу,
      зависящему от типа (цвета) сигнала.
    Подцели:
      01: Инициализация
      02: Циклическое переключение сигналов по таймнгу
      03: Выгрузка
  Инициализация
    Описание : @nonutx
      Модуль включается сообщением Kernel.Start.
      При его получении модуль инициализирует внутренние переменные и переходит в состояние паузы,
      ожидая следующей команды от контролирующей логики или ядра.
    Проверки:
      01: Инициализация, выгрузка по сообщению Kernel.Stop.
      02: Инициализация, выгрузка по сообщению MainLogic.Shutdown.
  Циклическое переключение сигналов по таймнгу
    Описание : @nonutx
      Цикл представляет собой переключение сигнала светофора по следующему паттерну:
      красный-жёлтый-зелёный-жёлтый-красный (круг замыкается на красном).
      Запуск цикла происходит по сообщению MainLogic.Start от контролирующей логики. Получая его,
      модуль отсылает сам себе сообщение CrossroadController.SetNextLight, по приёму которого
      даётся команда испольнительному модулю на установку цвета. Модуль ожидает ответ в течение
      TimeOut=100 мс. В случае приёма сообщения DeviceController.Success модуль по внутренней
      переменной определяет, какой цвет был установлен: красный, жёлтый или зелёный. В зависимости
      от этого модуль отсылает сам себе или сообщение CrossroadController.CountDownRed,
      или CrossroadController.CountDownYellow, или CrossroadController.CountDownGreen, и переходит
      в состояние обратного отсёчта вермени для красного, жёлтого или зелёного цвета соответственно.
      При переходе во внутренних переменных определяется цвет следующего сигнала.
      В случае получения сообщений DeviceController.Fail или Kernel.TimeOut модуль отсылает
      контролирующей логике сообщение MainLogic.ProblemDetected и переходит в состояние паузы,
      сбрасывая внутренные переменные до изначальных значений.
    Подцели:
      01: Обратный отсчет.
    Проверки:
      01: Старт цикла по сообщению MainLogic.Start.
      02: Отправка контролирующей логике сообщения MainLogic.ProblemDetected
        при получении сообщения DeviceController.Fail.
      03: Отправка контролирующей логике сообщения MainLogic.ProblemDetected
        при получении сообщения Kernel.TimeOut.
  Выгрузка
    Описание : @nonutx
      Выгрузка происходит из любого состояния по сообщению Kernel.Stop или из состояния паузы
      по сообщению MainLogic.Shutdown.
    Проверки:
      01: Выгрузка модуля из любого состояния по сообщению Kernel.Stop.
  Обратный отсчет.
    Описание : @nonutx
      Обратный отсчёт основан на тайм-ауте. Для каждого цвета сигнала светофора своё значение тайм-аута.
      Для сигнала красного цвета TimeOut=30000 мс (состояние RedLight).
      Для сигнала жёлтого цвета TimeOut=5000 мс (состояние YellowLight).
      Для сигнала зелёного цвета TimeOut=40000 мс (состояние GreenLight).
      По истечению тайм-аута модуль принимает сообщение Kernel.TimeOut и отправляет сам себе сообщение
      CrossroadController.SetNextLight, провоцируя продвижение по циклу.
    Проверки:
      01: Приём сообщения CrossroadController.CountDownRed, после отправки
        сообщения CrossroadController.SetNextLight из состояния паузы.
      02: Приём сообщения CrossroadController.CountDownYellow, после отправки
        сообщения CrossroadController.SetNextLight из состояния RedLight.
      03: Приём сообщения CrossroadController.CountDownGreen, после отправки
        сообщения CrossroadController.SetNextLight из состояния YellowLight.
      04: Приём сообщения CrossroadController.CountDownYellow, после отправки
        сообщения CrossroadController.SetNextLight из состояния GreenLight.
      05: Приём сообщения CrossroadController.CountDownRed, после отправки
        сообщения CrossroadController.SetNextLight из состояния YellowLight.
          