; Метаданные тестового модуля 
<root>: Kernel\Targets
1 : CrossroadController
  S01: Реализация логики переключения светофора
    Описание: @nonutx
      Перед началом работы модуль CrossroadController должен быть проинициализирован. После инициализации
      модуль ожидает от контролирующей логики команды для начала работы.
      Цель модуля - организация тайминга переключений сигналов светофора.
    Подцели:
      01: Инициализация
      02: Циклическое переключение сигналов по таймингу
      03: Выгрузка
    Проверки:
      01: Инициализация, выключение по сообщению Kernel.Stop.
      02: Инициализация, успешный запуск цикла, выключение по сообщению Kernel.Stop.
      03: Оповещание контролирующей логики о проблеме исполнительного модуля сообщением MainLogic.ProblemDetected.
  Инициализация
    Описание: @nonutx
      Модуль CrossroadController включается сообщением Kernel.Start.
      При его получении подуль устанавливает ColorType.Red как значение переменной nextLight и переходит в состояние паузы.
      В данном сотоянии модуль ожидает сообщение MainLogic.Start для старта циклического переключения сигнала
      светофора.
    Проверки:
      01: При включении, модуль записал значение ColorType.Red в переменную nextLight и перешел в состояние паузы.
      02: При получении сообщения MainLogic.Start, модуль перешёл из состояния паузы
        в Циклическое переключение сигналов по таймингу.
  Циклическое переключение сигналов по таймингу
    Описание : @nonutx
      Модуль принимает от контролирующей логики сообщение MainLogic.Start и запускает повторяющийся цикл
      переключения сигналов светофора - красный->жёлтый->зелёный->жёлтый->красный.
      Установка нового сигнала происходит отправкой модулем самому себе сообщения CrossroadController.SetNextLight.
      Получив его, модуль отправляет исполняющему модулю сообщение DeviceController.SetLight,
      передавая nextLight в качестве аргумента. В течение TimeOut мс модуль ожидает ответ от исполняющей логики,
      после чего обрабатывает его. В случае получения ответного сообщения DeviceController.Success
      модуль переходит в следующее состояние, в котором запускает таймер и обновляет значение переменной nextLight.
      По окончанию отсчета таймера модуль посылает себе сообщение CrossroadController.SetNextLight.
      В случае получения ответного сообщения DeviceController.Fail или отсутствия ответа вовсе модуль
      переходит к обработке проблемы.
      
    Подцели:
      01: Обработка проблемы
    Проверки:
      01: Убедиться, что после отправки сообщения модулю-исполнителю модуль перешёл в состояние ожидания
      ответа.
      02: Убедиться, что при получении ответа об успехе, модуль запустил таймер и обновил значение nextLight.
      03: Убедиться, что при возникновении проблемы, модуль прервал цикл и перешел к обработке проблемы.
  Выгрузка
    Описание : @nonutx
      При получении сообщения MainLogic.Shutdown, модуль останавливает все процессы и деинициализируется.
    Проверки:
      01: Убедиться, что при выгрузке модуль останавливает цикл переключений.
      02: Убедиться, что модуль выгружается из состояния паузы.
  Обработка проблемы
    Описание : @nonutx
      При возникновении проблемы - ответного сообщения DeviceController.Fail от модуля исполнителя или
      отсутсвия ответа вовсе - модуль останавливает цикл, отправляет контролируещей логике сообщение
      MainLogic.ProblemDetected и переходит в состояние паузы, послав себе сообщение CrossroadController.Pause.
      Находясь в паузе, котнроллер ожидает от окнтролирующей логики либо сообщения MainLogic.Start, либо MainLogic.Shutdown.
    Проверки:
      01: Убедиться, что модуль отсанавливает цикл.
      02: Убедиться, что модуль воспринимает сообщения MainLogic.Start и MainLogic.Shutdown.
      03: Убедиться, что модуль запускает цикл заново, при получении сообщения MainLogic.Start.
      04: Убедиться, что модуль выгружается, при получении сообщения MainLogic.Shutdown.
